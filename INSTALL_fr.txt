On suppose l'installation dans un répertoire /srv/instances/server_urban25
 (qui peut être changé) et sur une distribution ubuntu.
Le nom de votre utilisateur est remplacé dans nos commandes par "votreuser".
 Veuillez utiliser le votre à la place. 
Chaque commande, précisée ci-dessous après le symbole ">", peut être exécutée 
 (sans taper le symbole >).

On passe d'abord en root
> sudo -s

On installe des librairies nécessaires
> apt-get install build-essential
> apt-get install libreadline-gplv2-dev
> apt-get install zlib1g-dev (support zlib)
> apt-get install libjpeg62-dev
> apt-get install subversion
> apt-get install libpq-dev
> apt-get install libssl-dev
> apt-get install libxml2-dev libxslt1-dev
> apt-get install libbz2-dev

On va travailler dans le dossier /srv
> cd /srv

On se met propriétaire du dossier pour ne plus devoir travailler en root
> chown -R votreuser:votreuser .

On quitte l'utilisateur root.
> exit

On crée maintenant une arborescence de dossiers
> mkdir install
> mkdir instances
> cd install

On va installer un python 2.7 qui sera utilisé dans notre buildout
> wget http://www.python.org/ftp/python/2.7.16/Python-2.7.16.tgz
> tar xvzf Python-2.7.16.tgz
> cd Python-2.7.16
> ./configure --prefix=/srv/python2716
> make
> make install

On installe pip
> cd /srv/python2716
> cp /srv/instances/(nom_dossier_instance)/get-pip.py .
Si erreur : aucun fichier ou dossier de ce type:
aller sur https://bootstrap.pypa.io/pip/2.7/get-pip.py et enregistrer le fichier dans /srv/instances/(nom_dossier_instance)/
puis faire :
> cp /srv/instances/(nom_dossier)/get-pip.py .
> bin/python2.7 get-pip.py

On installe virtualenv
> bin/pip install virtualenv
On crée un lien symbolique vers bin/virtualenv
> sudo ln -s /srv/python2716/bin/virtualenv /usr/local/bin/virtualenv-2.7

On définit un cache pour buildout (si ce n'est déjà fait)
Voir http://www.communesplone.org/support/documentation/tutoriels/utilisation-dun-buildout/definition-dun-cache-pour-buildout/

On initialise le buildout
> make

1) Installation sans ZEO (une instance Zope)

On peut modifier dans le fichier buildout.cfg le port et le user effectif
 (effective-user) avec lequel l'application sera exécutée. 

Pour choisir entre l'instance de dev ou de prod aller dans buildout.cfg
Commenter prod et décommenter dev pour utiliser dev et inversément pour prod
puis réexécuter buildout

On exécute le buildout après chaque modification du fichier buildout.cfg
> make buildout
OU
> bin/buildout -v

On démarre le serveur zope. 
> bin/instance fg
OU
> bin/instance start

On peut se connecter à zope dans un navigateur sur l'adresse http://localhost:8080/manage_main

On peut ajouter un mount point (fichier db séparé à définir dans le fichier zope_add.conf)
=> choisir dans la liste (en haut à droite de la page du navigateur) "ZODB Mount Point"
Sélectionner le nom du mount point désiré ("xxx" et cliquer sur "Create selected mount points"). 

Tout ce qui va être ajouté dans le dossier "xxx" sera maintenant localisé dans le fichier db "xxx.fs"
 plutôt que dans "Data.fs". 

2) Installation avec ZEO (plusieurs instances Zope pour la même database)

On peut modifier dans le fichier buildout.cfg le port et le user effectif
 (effective-user) avec lequel l'application sera exécutée. 
On peut modifier dans le fichier zeo.cfg le port (zeo-address) du serveur zeo.

Pour choisir entre l'instance de dev ou de prod aller dans buildout.cfg
Commenter prod et décommenter dev pour utiliser dev et inversément pour prod
puis réexécuter buildout

On exécute le buildout après chaque modification du fichier buildout.cfg
> bin/buildout -v -c zeo.cfg

On démarre le serveur ZEO. 
> bin/zeoserver start

On démarre chaque instance zope (suivant le nom de la section définie). 
> bin/instance fg
OU
> bin/instance start

On peut se connecter à zope dans un navigateur sur l'adresse http://localhost:8080/manage_main

On peut ajouter un mount point (fichier db séparé à définir dans les fichiers zeo_add.conf et zope_add_zeo.conf)
=> choisir dans la liste (en haut à droite de la page du navigateur) "ZODB Mount Point"
Sélectionner le nom du mount point désiré ("xxx" et cliquer sur "Create selected mount points"). 

Tout ce qui va être ajouté dans le dossier "xxx" sera maintenant localisé dans le fichier db "xxx.fs"
 plutôt que dans "Data.fs". 

Installer Postgresql
> sudo apt -y install postgresql-12 postgresql-client-12

Installer Postbird sur pc dans les applications ubuntu pour gérer db

Modifier le mot de passe du super utilisateur postgres
> sudo -u postgres psql
dans le prompt posqtgres:
> ALTER USER postgres WITH PASSWORD 'postgres';
> exit

Créer database pour cadastre:
> sudo -u postgres createdb cadastre_xxx

Installer PostGIS
> sudo apt install postgis postgresql-12-postgis-3

Sur Postbird faire ds db :
> CREATE EXTENSION postgis;

Télécharger dump de la db à partir d'une instance déjà existante
Ajouter le dump à la db créée
> psql -h localhost -U postgres -W cadastre_xxx < cadastre_xxx.sql

Refresh db

